// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ContestClosedNowChooseWinner extends ethereum.Event {
  get params(): ContestClosedNowChooseWinner__Params {
    return new ContestClosedNowChooseWinner__Params(this);
  }
}

export class ContestClosedNowChooseWinner__Params {
  _event: ContestClosedNowChooseWinner;

  constructor(event: ContestClosedNowChooseWinner) {
    this._event = event;
  }

  get contestID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ContestCreatedAndJoined extends ethereum.Event {
  get params(): ContestCreatedAndJoined__Params {
    return new ContestCreatedAndJoined__Params(this);
  }
}

export class ContestCreatedAndJoined__Params {
  _event: ContestCreatedAndJoined;

  constructor(event: ContestCreatedAndJoined) {
    this._event = event;
  }

  get participant(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get contestID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ContestJoined extends ethereum.Event {
  get params(): ContestJoined__Params {
    return new ContestJoined__Params(this);
  }
}

export class ContestJoined__Params {
  _event: ContestJoined;

  constructor(event: ContestJoined) {
    this._event = event;
  }

  get participant(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get contestID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ContestKickedOFF extends ethereum.Event {
  get params(): ContestKickedOFF__Params {
    return new ContestKickedOFF__Params(this);
  }
}

export class ContestKickedOFF__Params {
  _event: ContestKickedOFF;

  constructor(event: ContestKickedOFF) {
    this._event = event;
  }

  get contestID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class DeFasStatusOfContestUpdated extends ethereum.Event {
  get params(): DeFasStatusOfContestUpdated__Params {
    return new DeFasStatusOfContestUpdated__Params(this);
  }
}

export class DeFasStatusOfContestUpdated__Params {
  _event: DeFasStatusOfContestUpdated;

  constructor(event: DeFasStatusOfContestUpdated) {
    this._event = event;
  }

  get contestStatus(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get contestID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LotteryRewardAnnounced extends ethereum.Event {
  get params(): LotteryRewardAnnounced__Params {
    return new LotteryRewardAnnounced__Params(this);
  }
}

export class LotteryRewardAnnounced__Params {
  _event: LotteryRewardAnnounced;

  constructor(event: LotteryRewardAnnounced) {
    this._event = event;
  }

  get requestId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class MoneyAddedtoWinner extends ethereum.Event {
  get params(): MoneyAddedtoWinner__Params {
    return new MoneyAddedtoWinner__Params(this);
  }
}

export class MoneyAddedtoWinner__Params {
  _event: MoneyAddedtoWinner;

  constructor(event: MoneyAddedtoWinner) {
    this._event = event;
  }

  get winner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get contestID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get prize(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class WithDrawnSucessfull extends ethereum.Event {
  get params(): WithDrawnSucessfull__Params {
    return new WithDrawnSucessfull__Params(this);
  }
}

export class WithDrawnSucessfull__Params {
  _event: WithDrawnSucessfull;

  constructor(event: WithDrawnSucessfull) {
    this._event = event;
  }

  get participant(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DeFaS__checkUpkeepResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }

  getUpkeepNeeded(): boolean {
    return this.value0;
  }

  getPerformData(): Bytes {
    return this.value1;
  }
}

export class DeFaS__contestResult {
  value0: BigInt;
  value1: BigInt;
  value2: i32;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: i32,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getMaxParticipant(): BigInt {
    return this.value0;
  }

  getEntryFee(): BigInt {
    return this.value1;
  }

  getCurrentContestStatus(): i32 {
    return this.value2;
  }

  getStartingTime(): BigInt {
    return this.value3;
  }

  getClosingTime(): BigInt {
    return this.value4;
  }
}

export class DeFaS extends ethereum.SmartContract {
  static bind(address: Address): DeFaS {
    return new DeFaS("DeFaS", address);
  }

  checkUpkeep(param0: Bytes): DeFaS__checkUpkeepResult {
    let result = super.call("checkUpkeep", "checkUpkeep(bytes):(bool,bytes)", [
      ethereum.Value.fromBytes(param0)
    ]);

    return new DeFaS__checkUpkeepResult(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_checkUpkeep(
    param0: Bytes
  ): ethereum.CallResult<DeFaS__checkUpkeepResult> {
    let result = super.tryCall(
      "checkUpkeep",
      "checkUpkeep(bytes):(bool,bytes)",
      [ethereum.Value.fromBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DeFaS__checkUpkeepResult(value[0].toBoolean(), value[1].toBytes())
    );
  }

  contest(param0: BigInt): DeFaS__contestResult {
    let result = super.call(
      "contest",
      "contest(uint256):(uint256,uint256,uint8,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new DeFaS__contestResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toI32(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_contest(param0: BigInt): ethereum.CallResult<DeFaS__contestResult> {
    let result = super.tryCall(
      "contest",
      "contest(uint256):(uint256,uint256,uint8,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DeFaS__contestResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toI32(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  getBalance(): BigInt {
    let result = super.call("getBalance", "getBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getBalance", "getBalance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getContestFee(contestID: BigInt): BigInt {
    let result = super.call(
      "getContestFee",
      "getContestFee(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(contestID)]
    );

    return result[0].toBigInt();
  }

  try_getContestFee(contestID: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getContestFee",
      "getContestFee(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(contestID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getContestsOfParticipant(participant: Address): Array<BigInt> {
    let result = super.call(
      "getContestsOfParticipant",
      "getContestsOfParticipant(address):(uint256[])",
      [ethereum.Value.fromAddress(participant)]
    );

    return result[0].toBigIntArray();
  }

  try_getContestsOfParticipant(
    participant: Address
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getContestsOfParticipant",
      "getContestsOfParticipant(address):(uint256[])",
      [ethereum.Value.fromAddress(participant)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getContractBalance(): BigInt {
    let result = super.call(
      "getContractBalance",
      "getContractBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getContractBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getContractBalance",
      "getContractBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentNumberofParticipant(contestID: BigInt): BigInt {
    let result = super.call(
      "getCurrentNumberofParticipant",
      "getCurrentNumberofParticipant(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(contestID)]
    );

    return result[0].toBigInt();
  }

  try_getCurrentNumberofParticipant(
    contestID: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentNumberofParticipant",
      "getCurrentNumberofParticipant(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(contestID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMaxNumberofParticipant(contestID: BigInt): BigInt {
    let result = super.call(
      "getMaxNumberofParticipant",
      "getMaxNumberofParticipant(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(contestID)]
    );

    return result[0].toBigInt();
  }

  try_getMaxNumberofParticipant(
    contestID: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMaxNumberofParticipant",
      "getMaxNumberofParticipant(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(contestID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getParticipantInContestID(contestID: BigInt): Array<Address> {
    let result = super.call(
      "getParticipantInContestID",
      "getParticipantInContestID(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(contestID)]
    );

    return result[0].toAddressArray();
  }

  try_getParticipantInContestID(
    contestID: BigInt
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getParticipantInContestID",
      "getParticipantInContestID(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(contestID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getParticipantToRank(contestID: BigInt): BigInt {
    let result = super.call(
      "getParticipantToRank",
      "getParticipantToRank(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(contestID)]
    );

    return result[0].toBigInt();
  }

  try_getParticipantToRank(contestID: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getParticipantToRank",
      "getParticipantToRank(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(contestID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStatus(contestID: BigInt): i32 {
    let result = super.call("getStatus", "getStatus(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(contestID)
    ]);

    return result[0].toI32();
  }

  try_getStatus(contestID: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("getStatus", "getStatus(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(contestID)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getWinner(contestID: BigInt): Address {
    let result = super.call("getWinner", "getWinner(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(contestID)
    ]);

    return result[0].toAddress();
  }

  try_getWinner(contestID: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("getWinner", "getWinner(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(contestID)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get vrfCoordinatorV2(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class AnnounceWinnerCall extends ethereum.Call {
  get inputs(): AnnounceWinnerCall__Inputs {
    return new AnnounceWinnerCall__Inputs(this);
  }

  get outputs(): AnnounceWinnerCall__Outputs {
    return new AnnounceWinnerCall__Outputs(this);
  }
}

export class AnnounceWinnerCall__Inputs {
  _call: AnnounceWinnerCall;

  constructor(call: AnnounceWinnerCall) {
    this._call = call;
  }

  get contestID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get winner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AnnounceWinnerCall__Outputs {
  _call: AnnounceWinnerCall;

  constructor(call: AnnounceWinnerCall) {
    this._call = call;
  }
}

export class CreateContestCall extends ethereum.Call {
  get inputs(): CreateContestCall__Inputs {
    return new CreateContestCall__Inputs(this);
  }

  get outputs(): CreateContestCall__Outputs {
    return new CreateContestCall__Outputs(this);
  }
}

export class CreateContestCall__Inputs {
  _call: CreateContestCall;

  constructor(call: CreateContestCall) {
    this._call = call;
  }

  get _maxParticipant(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _entryFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _startingTime(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _closingTime(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class CreateContestCall__Outputs {
  _call: CreateContestCall;

  constructor(call: CreateContestCall) {
    this._call = call;
  }
}

export class JoinContestCall extends ethereum.Call {
  get inputs(): JoinContestCall__Inputs {
    return new JoinContestCall__Inputs(this);
  }

  get outputs(): JoinContestCall__Outputs {
    return new JoinContestCall__Outputs(this);
  }
}

export class JoinContestCall__Inputs {
  _call: JoinContestCall;

  constructor(call: JoinContestCall) {
    this._call = call;
  }

  get contestID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class JoinContestCall__Outputs {
  _call: JoinContestCall;

  constructor(call: JoinContestCall) {
    this._call = call;
  }
}

export class PerformUpkeepCall extends ethereum.Call {
  get inputs(): PerformUpkeepCall__Inputs {
    return new PerformUpkeepCall__Inputs(this);
  }

  get outputs(): PerformUpkeepCall__Outputs {
    return new PerformUpkeepCall__Outputs(this);
  }
}

export class PerformUpkeepCall__Inputs {
  _call: PerformUpkeepCall;

  constructor(call: PerformUpkeepCall) {
    this._call = call;
  }

  get performData(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class PerformUpkeepCall__Outputs {
  _call: PerformUpkeepCall;

  constructor(call: PerformUpkeepCall) {
    this._call = call;
  }
}

export class RawFulfillRandomWordsCall extends ethereum.Call {
  get inputs(): RawFulfillRandomWordsCall__Inputs {
    return new RawFulfillRandomWordsCall__Inputs(this);
  }

  get outputs(): RawFulfillRandomWordsCall__Outputs {
    return new RawFulfillRandomWordsCall__Outputs(this);
  }
}

export class RawFulfillRandomWordsCall__Inputs {
  _call: RawFulfillRandomWordsCall;

  constructor(call: RawFulfillRandomWordsCall) {
    this._call = call;
  }

  get requestId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get randomWords(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class RawFulfillRandomWordsCall__Outputs {
  _call: RawFulfillRandomWordsCall;

  constructor(call: RawFulfillRandomWordsCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetCall extends ethereum.Call {
  get inputs(): SetCall__Inputs {
    return new SetCall__Inputs(this);
  }

  get outputs(): SetCall__Outputs {
    return new SetCall__Outputs(this);
  }
}

export class SetCall__Inputs {
  _call: SetCall;

  constructor(call: SetCall) {
    this._call = call;
  }

  get _status(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get contestID(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetCall__Outputs {
  _call: SetCall;

  constructor(call: SetCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithDrawYourMoneyCall extends ethereum.Call {
  get inputs(): WithDrawYourMoneyCall__Inputs {
    return new WithDrawYourMoneyCall__Inputs(this);
  }

  get outputs(): WithDrawYourMoneyCall__Outputs {
    return new WithDrawYourMoneyCall__Outputs(this);
  }
}

export class WithDrawYourMoneyCall__Inputs {
  _call: WithDrawYourMoneyCall;

  constructor(call: WithDrawYourMoneyCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithDrawYourMoneyCall__Outputs {
  _call: WithDrawYourMoneyCall;

  constructor(call: WithDrawYourMoneyCall) {
    this._call = call;
  }
}
