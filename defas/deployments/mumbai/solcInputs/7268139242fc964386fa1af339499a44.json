{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/DeFaS.sol": {
      "content": "//SPDX-License-Identifier:MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\r\n\r\n/* Errors */\r\nerror DeFaS_NotEnoughMoneyInYourWallet();\r\nerror DeFaS_ContestISFull();\r\nerror DeFaS_ProvideEqualEntreeFee();\r\nerror DeFaS__UpkeepNotNeeded();\r\n error DeFas_WinnerIsAlreadyAnnounced();\r\ncontract DeFaS is Ownable,VRFConsumerBaseV2 ,AutomationCompatibleInterface {\r\n    /* Type declarations */\r\n    enum DeFaSState {\r\n        Preview,\r\n        GoingOn,\r\n        Closed\r\n    }\r\n//vrf stuffs\r\n\r\nVRFCoordinatorV2Interface private immutable vrfCoordinator;\r\n\r\n\r\nuint256[] internal contestIDToRandomNumber;\r\n\r\n    //Game variables\r\n    //Participant- contains all information about players.\r\n    //Contest -shows type of contest and who participated in any individual contest\r\n    struct Contest {\r\n        uint256 maxParticipant;\r\n        uint256 entryFee;\r\n        DeFaSState currentContestStatus;\r\n        uint256 startingTime;\r\n        uint256 closingTime;\r\n    }\r\n    Contest[] public contest;\r\n    mapping(uint256 => address) Winner;\r\n    mapping(address => uint256) participantBalance;\r\n\r\n    mapping(uint256 => address[]) contestIDToPlayers;\r\n\r\n    mapping(address => uint256[]) participantToContestPlayed;\r\n    mapping(address => uint256[]) participantToRanks;\r\n    /* Events */\r\n    event DeFasStatusOfContestUpdated(\r\n        DeFaSState contestStatus,\r\n        uint256 contestID\r\n    );\r\n    event ContestJoined(address participant, uint256 contestID);\r\n\r\n    event ContestCreatedAndJoined(address indexed participant, uint256 contestID);\r\n    event MoneyAddedtoWinner(address indexed  winner, uint256 contestID, uint256 indexed prize);\r\n    event WithDrawnSucessfull(address participant, uint256 amount);\r\n    event LotteryRewardAnnounced(uint256 indexed requestId);\r\n    event ContestClosedNowChooseWinner(uint256 contestID);\r\n    event ContestKickedOFF(uint256 indexed contestID);\r\n\r\n    constructor(address vrfCoordinatorV2)VRFConsumerBaseV2(vrfCoordinatorV2) {\r\n          vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\r\n\r\n    }\r\n    \r\n    //modifier for check if partipation is live\r\n    modifier ifStarted(uint256 _contestID) {\r\n        require(\r\n            contest[_contestID].currentContestStatus == DeFaSState.Preview,\r\n            \"This Contest is not active at this Time\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function set(DeFaSState _status, uint256 contestID) public onlyOwner {\r\n        contest[contestID].currentContestStatus = _status;\r\n        emit DeFasStatusOfContestUpdated(_status, contestID);\r\n    }\r\n\r\n    //joinContest\r\n\r\n    function joinContest(uint256 contestID) public ifStarted(contestID) {\r\n        //check if contest has not reached to max participant\r\n        if (\r\n            contestIDToPlayers[contestID].length ==\r\n            contest[contestID].maxParticipant\r\n        ) {\r\n            revert DeFaS_ContestISFull();\r\n        }\r\n        if (participantBalance[msg.sender] < contest[contestID].entryFee) {\r\n            revert DeFaS_NotEnoughMoneyInYourWallet();\r\n        }\r\n        participantBalance[msg.sender] -= contest[contestID].entryFee;\r\n        contestIDToPlayers[contestID].push(msg.sender);\r\n\r\n        participantToContestPlayed[msg.sender].push(contestID);\r\n\r\n        emit ContestJoined(msg.sender, contestID);\r\n    }\r\n\r\n    //createContest\r\n\r\n    function createContest(\r\n        uint256 _maxParticipant,\r\n        uint256 _entryFee,\r\n        uint256 _startingTime,\r\n        uint256 _closingTime\r\n    ) public {\r\n        require(\r\n            _maxParticipant != 0 &&\r\n                _entryFee != 0 &&\r\n                _startingTime != 0 &&\r\n                _closingTime != 0,\r\n            \"MaxParticipant,EntreeFee can not be zero and also provide startingTime and closingTime \"\r\n        );\r\n\r\n        if (participantBalance[msg.sender] < _entryFee) {\r\n            revert DeFaS_NotEnoughMoneyInYourWallet();\r\n        }\r\n        participantBalance[msg.sender] -= _entryFee;\r\n\r\n        contest.push(\r\n            Contest({\r\n                maxParticipant: _maxParticipant,\r\n                entryFee: _entryFee,\r\n                currentContestStatus: DeFaSState.Preview,\r\n                startingTime: _startingTime,\r\n                closingTime: _closingTime\r\n            })\r\n        );\r\n\r\n        uint256 newContestID = contest.length;\r\n        contestIDToPlayers[newContestID - 1].push(msg.sender);\r\n        participantToContestPlayed[msg.sender].push(newContestID-1);\r\n\r\n        emit ContestCreatedAndJoined(msg.sender, newContestID - 1);\r\n    }\r\n\r\n    function AnnounceWinner(uint256 contestID, address winner)\r\n        external\r\n        onlyOwner\r\n    {\r\n       //check if contest is completed or already you have announced result\r\n      if(Winner[contestID]!=address(0)){\r\n            revert  DeFas_WinnerIsAlreadyAnnounced();\r\n        }\r\n        Winner[contestID] = winner;\r\n        uint256 entryFee = contest[contestID].entryFee;\r\n        uint256 totalParticipant = contestIDToPlayers[contestID].length;\r\n        participantBalance[winner] +=\r\n            ((entryFee * totalParticipant) * 90) /\r\n            100;\r\n        uint256 randomness=contestIDToRandomNumber[contestID]%totalParticipant;\r\n    \r\n        address lotterWinner=        contestIDToPlayers[contestID][randomness];\r\n        participantBalance[lotterWinner]+=((entryFee * totalParticipant) * 8) /\r\n            100;\r\n        emit MoneyAddedtoWinner(\r\n            winner,\r\n            contestID,\r\n            ((entryFee * totalParticipant) * 90) / 100\r\n        );\r\n     \r\n\r\n       \r\n    }\r\n\r\n    //withDraw Money\r\n\r\n    function withDrawYourMoney(uint256 amount) external {\r\n        require(\r\n            participantBalance[msg.sender] >= amount,\r\n            \"you don't have any balance in your wallet\"\r\n        );\r\n        participantBalance[msg.sender] -= amount;\r\n        (bool sent, ) = payable(msg.sender).call{value: amount}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n        if (sent) {\r\n            emit WithDrawnSucessfull(msg.sender, amount);\r\n\r\n        }\r\n    }\r\n\r\n\r\n function toBytes(uint256 x) internal pure returns (bytes memory b) {\r\n        b=abi.encode(x);\r\n\r\n    }\r\n\r\n    function toUint256(bytes memory b) internal pure returns(uint256 x){\r\n       x=abi.decode(b,(uint256));\r\n    }\r\n\r\n    //checkUpkeep\r\n    function checkUpkeep(\r\n        bytes memory /*checkData */\r\n    ) public\r\n        view\r\n        override\r\n        returns (\r\n            bool upkeepNeeded,\r\n             bytes memory performData\r\n        )\r\n {\r\n     \r\n     uint lastContest=contest.length;\r\n     for(uint i=0;i<lastContest;i++){\r\n         if(contest[i].currentContestStatus!=DeFaSState.Closed){\r\n     if((block.timestamp>contest[i].startingTime && contest[i].currentContestStatus==DeFaSState.Preview)||(block.timestamp>contest[i].closingTime&&contest[i].currentContestStatus==DeFaSState.GoingOn)){\r\n         upkeepNeeded=true;\r\n\r\n         return (upkeepNeeded, toBytes(i));\r\n     }\r\n         }\r\n \r\n    }\r\n    return (upkeepNeeded, \"\");\r\n }\r\n\r\n    //perform upkeep\r\n    function performUpkeep(\r\n        bytes calldata performData\r\n    ) external override {\r\n        (bool upkeepNeeded, ) = checkUpkeep(\"\");\r\n\r\n        if(!upkeepNeeded){\r\n            revert DeFaS__UpkeepNotNeeded();\r\n        }\r\n       \r\n     uint256 contestID=toUint256(performData);\r\n        if(contest[contestID].currentContestStatus==DeFaSState.Preview){\r\n            contest[contestID].currentContestStatus=DeFaSState.GoingOn;\r\n            emit ContestKickedOFF(contestID);\r\n        }else{\r\n      contest[contestID].currentContestStatus=DeFaSState.Closed;\r\n\r\n        //Now we can choose the one randome player from this contest to give him \r\n        //reward 10% contest money\r\n        uint256 requestId=vrfCoordinator.requestRandomWords(\r\n            0x4b09e658ed251bcafeebbc69400383d49f344ace09b9576fe248bb02c003fe9f,//keyHash for mumbai\r\n            3384 ,//SubscriptionId,\r\n            3 ,//Request Confirmation\r\n            500000,//callbackGasLimit\r\n            1//Number of RandomNumber\r\n        );\r\n      emit LotteryRewardAnnounced(requestId);\r\n      emit ContestClosedNowChooseWinner(contestID);\r\n\r\n        }\r\n     \r\n    }\r\n    //fullfillRandomWords\r\n    function fulfillRandomWords(\r\n        uint256, /* requestId */\r\n        uint256[] memory randomWords\r\n    ) internal override{\r\n\r\n        contestIDToRandomNumber.push(randomWords[0]);\r\n\r\n    }\r\n\r\n\r\n\r\n    //getter functions\r\n\r\n    function getStatus(uint256 contestID) external view returns (DeFaSState) {\r\n        return contest[contestID].currentContestStatus;\r\n    }\r\n\r\n    //get balance of participant\r\n    function getBalance() external view returns (uint256) {\r\n        return participantBalance[msg.sender];\r\n    }\r\n\r\n    //get contest fees\r\n    function getContestFee(uint256 contestID) external view returns (uint256) {\r\n        return contest[contestID].entryFee;\r\n    }\r\n\r\n    //get  current number of participant in current contest\r\n    function getCurrentNumberofParticipant(uint256 contestID)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return contestIDToPlayers[contestID].length;\r\n    }\r\n\r\n    //get max number of participant in a contest\r\n    function getMaxNumberofParticipant(uint256 contestID)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return contest[contestID].maxParticipant;\r\n    }\r\n\r\n    //get winner of a individual contestID\r\n    function getWinner(uint256 contestID) external view returns (address) {\r\n        return Winner[contestID];\r\n    }\r\n\r\n    // getting list of players who has taken part in any individual contest\r\n\r\n    function getParticipantInContestID(uint256 contestID)\r\n        external\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        return contestIDToPlayers[contestID];\r\n    }\r\n\r\n    //getting list of contests which has been participated by a participant\r\n    function getContestsOfParticipant(address participant)\r\n        external\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        return participantToContestPlayed[participant];\r\n    }\r\n\r\n    function getParticipantToRank(uint256 contestID)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return participantToRanks[msg.sender][contestID];\r\n    }\r\n\r\n    // Function to receive Ether. msg.data must be empty\r\n    receive() external payable {\r\n        participantBalance[msg.sender] += msg.value;\r\n    }\r\n\r\n    // Fallback function is called when msg.data is not empty\r\n    fallback() external payable {\r\n        participantBalance[msg.sender] += msg.value;\r\n    }\r\n\r\n    function getContractBalance() external view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n}\r\n\r\n\r\n\r\n//contract address=0x451F3D6BAeF585ddfEF6e936dAE57C10ac63B44B on mumbai \r\n//https://mumbai.polygonscan.com/address/0x451F3D6BAeF585ddfEF6e936dAE57C10ac63B44B#code\r\n//graph init --contract-name DeFaS --product hosted-service tri-pathi/defasgame  --from-contract 0x451F3D6BAeF585ddfEF6e936dAE57C10ac63B44B  --abi ./abi.json --network mumbai graph\r\n\r\n\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}